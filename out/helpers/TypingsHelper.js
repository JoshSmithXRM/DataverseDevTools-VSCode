"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypingsHelper = void 0;
const vscode = require("vscode");
const dom = require("dts-dom");
const conditional_reduce_1 = require("conditional-reduce");
const ExtensionMethods_1 = require("../utils/ExtensionMethods");
const FileSystem_1 = require("../utils/FileSystem");
const Placeholders_1 = require("../utils/Placeholders");
const typingNamespace = "Xrm";
const typingInterface = "EventContext";
const typingMethod = "getFormContext";
const typingOmitString = "Omit<Xrm.FormContext, 'getAttribute'>";
const xrmAttribute = "Xrm.Attributes.Attribute";
const toolComment = `This code is auto-generated by VSCode Extension 'Dataverse DevTools'
Project Source: https://github.com/Power-Maverick/DataverseDevTools-VSCode

THE CODE AND INFORMATION IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE CODE OR THE USE OR OTHER
DEALINGS IN THE CODE.`;
class TypingsHelper {
    /**
     * Initialization constructor for VS Code Context
     */
    constructor(vscontext, dvHelper) {
        this.vscontext = vscontext;
        this.dvHelper = dvHelper;
    }
    generateTyping(entityLogicalName) {
        return __awaiter(this, void 0, void 0, function* () {
            const attributes = yield this.dvHelper.getAttributesForEntity(entityLogicalName);
            const camelizedEntityName = ExtensionMethods_1.camelize(entityLogicalName);
            const pascalizedEntityName = ExtensionMethods_1.pascalize(entityLogicalName);
            const interfaceAttributes = dom.create.interface(`${pascalizedEntityName}Attributes`);
            let typeEntity = dom.create.alias(pascalizedEntityName, dom.create.namedTypeReference(`${typingOmitString} & ${interfaceAttributes.name}`), dom.DeclarationFlags.None);
            let interfaceEventContext = dom.create.interface(typingInterface);
            interfaceEventContext.members.push(dom.create.method(typingMethod, [], typeEntity));
            const nsXrm = dom.create.namespace(typingNamespace);
            nsXrm.jsDocComment = toolComment;
            nsXrm.members.push(typeEntity);
            nsXrm.members.push(interfaceEventContext);
            attributes
                .sort(this.sortAttributes)
                .filter((a) => a.AttributeType !== "Virtual" && a.IsCustomizable.Value && !a.LogicalName.endsWith("_base"))
                .forEach((a) => {
                interfaceAttributes.members.push(this.createAttributeMethod(a));
                //intf.members.push(dom.create.method("getThing", [dom.create.parameter("x", dom.type.number)], dom.type.void, dom.DeclarationFlags.Optional));
            });
            nsXrm.members.push(interfaceAttributes);
            const refPath = [dom.create.tripleSlashReferencePathDirective("../node_modules/@types/xrm/index.d.ts")];
            const emitOptions = {
                tripleSlashDirectives: refPath,
            };
            const wsPath = FileSystem_1.getWorkspaceFolder();
            if (wsPath) {
                let dirsTuple = yield vscode.workspace.fs.readDirectory(wsPath);
                let dirs = dirsTuple.filter((d) => d[1] === vscode.FileType.Directory && d[0] !== "node_modules" && !d[0].startsWith(".")).map((d) => d[0]);
                let dirQuickPick = Placeholders_1.Placeholders.getQuickPickOptions(Placeholders_1.Placeholders.typingDirSelection);
                let dirResponse = yield vscode.window.showQuickPick(dirs, dirQuickPick);
                if (dirResponse) {
                    FileSystem_1.writeFileSync(vscode.Uri.joinPath(wsPath, dirResponse, `${camelizedEntityName}.d.ts`).fsPath, dom.emit(nsXrm, emitOptions));
                    //console.log(dom.emit(nsXrm, emitOptions));
                }
            }
        });
    }
    createAttributeMethod(attr) {
        let alias = dom.create.alias(xrmAttribute, dom.type.undefined, dom.DeclarationFlags.None);
        return dom.create.method("getAttribute", [dom.create.parameter("name", dom.type.stringLiteral(ExtensionMethods_1.camelize(attr.LogicalName)))], alias);
        //return dom.create.property(camelize(attr.LogicalName), this.convertType(attr.AttributeType.toLowerCase()), dom.DeclarationFlags.Optional);
    }
    sortAttributes(a1, a2) {
        if (a1.LogicalName > a2.LogicalName) {
            return 1;
        }
        if (a1.LogicalName < a2.LogicalName) {
            return -1;
        }
        return 0;
    }
    convertType(t) {
        return conditional_reduce_1.reduce(t, {
            string: () => dom.type.string,
            integer: () => dom.type.number,
            double: () => dom.type.number,
            uniqueidentifier: () => dom.type.string,
            memo: () => dom.type.string,
            money: () => dom.type.number,
            boolean: () => dom.type.boolean,
            bigint: () => dom.type.number,
            decimal: () => dom.type.number,
            datetime: () => dom.type.string,
        }, () => dom.type.object);
    }
}
exports.TypingsHelper = TypingsHelper;
//# sourceMappingURL=TypingsHelper.js.map